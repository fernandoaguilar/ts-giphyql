// Code generated by Prisma (prisma@1.21.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  gif: (where?: GifWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gif: (where: GifWhereUniqueInput) => GifPromise;
  gifs: (
    args?: {
      where?: GifWhereInput;
      orderBy?: GifOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Gif>;
  gifsConnection: (
    args?: {
      where?: GifWhereInput;
      orderBy?: GifOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GifConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGif: (data: GifCreateInput) => GifPromise;
  updateGif: (
    args: { data: GifUpdateInput; where: GifWhereUniqueInput }
  ) => GifPromise;
  updateManyGifs: (
    args: { data: GifUpdateManyMutationInput; where?: GifWhereInput }
  ) => BatchPayloadPromise;
  upsertGif: (
    args: {
      where: GifWhereUniqueInput;
      create: GifCreateInput;
      update: GifUpdateInput;
    }
  ) => GifPromise;
  deleteGif: (where: GifWhereUniqueInput) => GifPromise;
  deleteManyGifs: (where?: GifWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gif: (
    where?: GifSubscriptionWhereInput
  ) => GifSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GifOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "giphyId_ASC"
  | "giphyId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "url_ASC"
  | "url_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "trendingDatetime_ASC"
  | "trendingDatetime_DESC"
  | "title_ASC"
  | "title_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GifUpdateInput {
  giphyId?: ID_Input;
  url?: String;
  rating?: String;
  trendingDatetime?: String;
  title?: String;
  likedBy?: UserUpdateManyWithoutGifsInput;
}

export type GifWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  giphyId?: ID_Input;
}>;

export interface UserUpdateWithWhereUniqueWithoutGifsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGifsDataInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  gifs_every?: GifWhereInput;
  gifs_some?: GifWhereInput;
  gifs_none?: GifWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface GifCreateWithoutLikedByInput {
  giphyId: ID_Input;
  url: String;
  rating: String;
  trendingDatetime?: String;
  title?: String;
}

export interface UserUpsertWithWhereUniqueWithoutGifsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutGifsDataInput;
  create: UserCreateWithoutGifsInput;
}

export interface GifCreateManyWithoutLikedByInput {
  create?: GifCreateWithoutLikedByInput[] | GifCreateWithoutLikedByInput;
  connect?: GifWhereUniqueInput[] | GifWhereUniqueInput;
}

export interface UserUpdateWithoutGifsDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface GifSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GifWhereInput;
  AND?: GifSubscriptionWhereInput[] | GifSubscriptionWhereInput;
  OR?: GifSubscriptionWhereInput[] | GifSubscriptionWhereInput;
  NOT?: GifSubscriptionWhereInput[] | GifSubscriptionWhereInput;
}

export interface GifUpsertWithWhereUniqueWithoutLikedByInput {
  where: GifWhereUniqueInput;
  update: GifUpdateWithoutLikedByDataInput;
  create: GifCreateWithoutLikedByInput;
}

export interface GifCreateInput {
  giphyId: ID_Input;
  url: String;
  rating: String;
  trendingDatetime?: String;
  title?: String;
  likedBy?: UserCreateManyWithoutGifsInput;
}

export interface GifUpdateWithWhereUniqueWithoutLikedByInput {
  where: GifWhereUniqueInput;
  data: GifUpdateWithoutLikedByDataInput;
}

export interface UserCreateManyWithoutGifsInput {
  create?: UserCreateWithoutGifsInput[] | UserCreateWithoutGifsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserCreateWithoutGifsInput {
  email: String;
  password: String;
  name: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface GifUpdateManyMutationInput {
  giphyId?: ID_Input;
  url?: String;
  rating?: String;
  trendingDatetime?: String;
  title?: String;
}

export interface GifWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  giphyId?: ID_Input;
  giphyId_not?: ID_Input;
  giphyId_in?: ID_Input[] | ID_Input;
  giphyId_not_in?: ID_Input[] | ID_Input;
  giphyId_lt?: ID_Input;
  giphyId_lte?: ID_Input;
  giphyId_gt?: ID_Input;
  giphyId_gte?: ID_Input;
  giphyId_contains?: ID_Input;
  giphyId_not_contains?: ID_Input;
  giphyId_starts_with?: ID_Input;
  giphyId_not_starts_with?: ID_Input;
  giphyId_ends_with?: ID_Input;
  giphyId_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  rating?: String;
  rating_not?: String;
  rating_in?: String[] | String;
  rating_not_in?: String[] | String;
  rating_lt?: String;
  rating_lte?: String;
  rating_gt?: String;
  rating_gte?: String;
  rating_contains?: String;
  rating_not_contains?: String;
  rating_starts_with?: String;
  rating_not_starts_with?: String;
  rating_ends_with?: String;
  rating_not_ends_with?: String;
  trendingDatetime?: String;
  trendingDatetime_not?: String;
  trendingDatetime_in?: String[] | String;
  trendingDatetime_not_in?: String[] | String;
  trendingDatetime_lt?: String;
  trendingDatetime_lte?: String;
  trendingDatetime_gt?: String;
  trendingDatetime_gte?: String;
  trendingDatetime_contains?: String;
  trendingDatetime_not_contains?: String;
  trendingDatetime_starts_with?: String;
  trendingDatetime_not_starts_with?: String;
  trendingDatetime_ends_with?: String;
  trendingDatetime_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  likedBy_every?: UserWhereInput;
  likedBy_some?: UserWhereInput;
  likedBy_none?: UserWhereInput;
  AND?: GifWhereInput[] | GifWhereInput;
  OR?: GifWhereInput[] | GifWhereInput;
  NOT?: GifWhereInput[] | GifWhereInput;
}

export interface UserUpdateManyWithoutGifsInput {
  create?: UserCreateWithoutGifsInput[] | UserCreateWithoutGifsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutGifsInput[]
    | UserUpdateWithWhereUniqueWithoutGifsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutGifsInput[]
    | UserUpsertWithWhereUniqueWithoutGifsInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  gifs?: GifCreateManyWithoutLikedByInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  gifs?: GifUpdateManyWithoutLikedByInput;
}

export interface GifUpdateManyWithoutLikedByInput {
  create?: GifCreateWithoutLikedByInput[] | GifCreateWithoutLikedByInput;
  delete?: GifWhereUniqueInput[] | GifWhereUniqueInput;
  connect?: GifWhereUniqueInput[] | GifWhereUniqueInput;
  disconnect?: GifWhereUniqueInput[] | GifWhereUniqueInput;
  update?:
    | GifUpdateWithWhereUniqueWithoutLikedByInput[]
    | GifUpdateWithWhereUniqueWithoutLikedByInput;
  upsert?:
    | GifUpsertWithWhereUniqueWithoutLikedByInput[]
    | GifUpsertWithWhereUniqueWithoutLikedByInput;
}

export interface GifUpdateWithoutLikedByDataInput {
  giphyId?: ID_Input;
  url?: String;
  rating?: String;
  trendingDatetime?: String;
  title?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface GifEdge {
  cursor: String;
}

export interface GifEdgePromise extends Promise<GifEdge>, Fragmentable {
  node: <T = GifPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GifEdgeSubscription
  extends Promise<AsyncIterator<GifEdge>>,
    Fragmentable {
  node: <T = GifSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GifSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GifSubscriptionPayloadPromise
  extends Promise<GifSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GifPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GifPreviousValuesPromise>() => T;
}

export interface GifSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GifSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GifSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GifPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  gifs: <T = FragmentableArray<Gif>>(
    args?: {
      where?: GifWhereInput;
      orderBy?: GifOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gifs: <T = Promise<AsyncIterator<GifSubscription>>>(
    args?: {
      where?: GifWhereInput;
      orderBy?: GifOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Gif {
  id: ID_Output;
  giphyId: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  url: String;
  rating: String;
  trendingDatetime?: String;
  title?: String;
}

export interface GifPromise extends Promise<Gif>, Fragmentable {
  id: () => Promise<ID_Output>;
  giphyId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
  rating: () => Promise<String>;
  trendingDatetime: () => Promise<String>;
  title: () => Promise<String>;
  likedBy: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GifSubscription
  extends Promise<AsyncIterator<Gif>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  giphyId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<String>>;
  trendingDatetime: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  likedBy: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GifPreviousValues {
  id: ID_Output;
  giphyId: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  url: String;
  rating: String;
  trendingDatetime?: String;
  title?: String;
}

export interface GifPreviousValuesPromise
  extends Promise<GifPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  giphyId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
  rating: () => Promise<String>;
  trendingDatetime: () => Promise<String>;
  title: () => Promise<String>;
}

export interface GifPreviousValuesSubscription
  extends Promise<AsyncIterator<GifPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  giphyId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<String>>;
  trendingDatetime: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface GifConnection {}

export interface GifConnectionPromise
  extends Promise<GifConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GifEdge>>() => T;
  aggregate: <T = AggregateGifPromise>() => T;
}

export interface GifConnectionSubscription
  extends Promise<AsyncIterator<GifConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GifEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGifSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateGif {
  count: Int;
}

export interface AggregateGifPromise
  extends Promise<AggregateGif>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGifSubscription
  extends Promise<AsyncIterator<AggregateGif>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Gif",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
